*tabterm.txt*      For tabterm.nvim      ~

==============================================================================
CONTENTS                                     *tabterm-contents*

  1. Introduction...................|tabterm-introduction|
  2. Installation.................|tabterm-installation|
  3. Configuration................|tabterm-configuration|
  4. Usage..........................|tabterm-usage|
     - Keymaps......................|tabterm-keymaps|
     - Mouse Interaction............|tabterm-mouse-interaction|
  5. API............................|tabterm-api|

==============================================================================
INTRODUCTION                                 *tabterm-introduction*

tabterm.nvim is a Neovim plugin that extends |toggleterm.nvim| to provide a
tab-like terminal management experience using `winbar`.

It allows you to manage multiple terminals within a single Neovim tab,
switching between them easily via keymaps or mouse clicks on the winbar.

==============================================================================
INSTALLATION                               *tabterm-installation*

Using |lazy.nvim|:

>lua
{
  "goropikari/tabterm.nvim",
  dependencies = { "akinsho/toggleterm.nvim" },
  opts = {
    -- your configuration here
  },
}
<

==============================================================================
CONFIGURATION                              *tabterm-configuration*

The plugin is configured via the `setup` function. You can pass a table with
your desired options to the `opts` field in your plugin manager.

Example:
>lua
require('tabterm').setup({
  shell = 'zsh',
  height = 0.5,
  keymap = {
    toggle = '<A-t>',
    add = '<A-n>',
    shutdown = '<A-w>',
    move_next_tab = '<A-l>',
    move_prev_tab = '<A-h>',
  },
})
<

Default configuration:
>lua
{
  shell = vim.o.shell or 'bash',
  height = 0.4,
  keymap = {
      toggle = '<c-t>',
      add = '<c-n>',
      shutdown = '<M-w>',
      move_next_tab = '<M-n>',
      move_prev_tab = '<M-h>',
      send_visual = '<leader>ss',
      send_line = '<leader>ss',
  },
}
<

OPTIONS

`shell`                                      *tabterm-options-shell*
  Type: `string`
  Default: `vim.o.shell` or `'bash'`
  The shell to be used for the terminal.

`height`                                     *tabterm-options-height*
  Type: `number`
  Default: `0.4`
  The height of the terminal window, as a percentage of the Neovim window
  height.

`keymap`                                     *tabterm-options-keymap*
  Type: `table<string, string>`
  Default: see above
  A table to override the default keymaps. See |tabterm-keymaps| for details
  on the available keys.

==============================================================================
USAGE                                        *tabterm-usage*

------------------------------------------------------------------------------
KEYMAPS                                      *tabterm-keymaps*

The following actions can be mapped. You can change the keybindings in the
`setup` function.

`toggle`
  Default: `<c-t>`
  Toggles the terminal window open or closed.

`add`
  Default: `<c-n>` (in terminal buffer)
  Adds a new terminal tab.

`shutdown`
  Default: `<M-w>` (in terminal buffer)
  Shuts down the current terminal tab.

`move_next_tab`
  Default: `<M-n>` (in terminal buffer)
  Moves to the next terminal tab.

`move_prev_tab`
  Default: `<M-h>` (in terminal buffer)
  Moves to the previous terminal tab.

`send_visual`
  Default: `<leader>ss` (in visual mode)
  Sends the visually selected text to the current terminal.

`send_line`
  Default: `<leader>ss` (in normal mode)
  Sends the current line to the current terminal.

------------------------------------------------------------------------------
MOUSE INTERACTION                            *tabterm-mouse-interaction*

You can interact with the terminal tabs in the `winbar` using your mouse.

Left-click
  Switches to the clicked terminal tab.

Middle-click
  Shuts down the clicked terminal tab.

Right-click
  Prompts to rename the clicked terminal tab.

==============================================================================
API                                          *tabterm-api*

The following functions are available from the `tabterm` module:

`require('tabterm').setup(opts)`             *tabterm.setup()*
  Sets up the plugin with the given options. See |tabterm-configuration|.

`require('tabterm').toggle()`                *tabterm.toggle()*
  Toggles the terminal window.

`require('tabterm').add_term()`              *tabterm.add_term()*
  Adds a new terminal.

`require('tabterm').move_next()`             *tabterm.move_next()*
  Moves to the next terminal.

`require('tabterm').move_previous()`         *tabterm.move_previous()*
  Moves to the previous terminal.

`require('tabterm').shutdown_current_term()` *tabterm.shutdown_current_term()*
  Shuts down the current terminal.

`require('tabterm').send_line_text()`        *tabterm.send_line_text()*
  Sends the current line to the terminal.

`require('tabterm').send_visual_selection()` *tabterm.send_visual_selection()*
  Sends the visual selection to the terminal.

vim:tw=78:ts=8:ft=help:norl:
