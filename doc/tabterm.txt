*tabterm.txt*      For Neovim | Generated by Goose

==============================================================================
CONTENTS                                      *tabterm-contents*

  1. Introduction.................................... |tabterm-introduction|
  2. Features........................................ |tabterm-features|
  3. Dependencies.................................... |tabterm-dependencies|
  4. Installation.................................... |tabterm-installation|
  5. Usage........................................... |tabterm-usage|
     - Default Keymaps............................... |tabterm-keymaps|
     - Mouse Actions................................. |tabterm-mouse-actions|
  6. Configuration................................... |tabterm-configuration|
     - Configuration Example......................... |tabterm-configuration-example|
  7. API............................................. |tabterm-api|
  8. License......................................... |tabterm-license|

==============================================================================
INTRODUCTION                                  *tabterm-introduction*

`tabterm.nvim` is a Neovim plugin that extends |toggleterm.nvim| to provide
a tab-like terminal management experience using the `winbar`. It allows you
to manage multiple terminals in a single, toggleable window, with a visual
"tab" interface for easy switching, creation, and management.

==============================================================================
FEATURES                                      *tabterm-features*

- Manage multiple terminals in a single, toggleable window.
- Provides a "tab"-like interface for terminals using `winbar`.
- Switch, create, close, and rename terminals with mouse clicks.
- Customizable keymaps and appearance.
- Send visual selections or the current line to a terminal.

==============================================================================
DEPENDENCIES                                  *tabterm-dependencies*

- [akinsho/toggleterm.nvim](https://github.com/akinsho/toggleterm.nvim)

==============================================================================
INSTALLATION                                  *tabterm-installation*

Using |lazy.nvim|:
>lua
  {
      "goropikari/tabterm.nvim",
      dependencies = { "akinsho/toggleterm.nvim" },
      opts = {}, -- see |tabterm-configuration-example|
  }
<
==============================================================================
USAGE                                         *tabterm-usage*

The terminal window can be opened and closed with the toggle keymap. Once
open, you can add new terminals, which will appear as tabs in the `winbar`.

------------------------------------------------------------------------------
Default Keymaps                               *tabterm-keymaps*

These keymaps are active in the terminal buffer (in Normal or Terminal mode)
unless specified otherwise.

- `<C-t>`: Toggle the terminal window. (Normal and Terminal mode)
- `<C-n>`: Add a new terminal tab. (Normal and Terminal mode in terminal buffer)
- `<M-w>`: Close the current terminal tab. (Normal mode in terminal buffer)
- `<M-n>`: Move to the next terminal tab. (Normal mode in terminal buffer)
- `<M-h>`: Move to the previous terminal tab. (Normal mode in terminal buffer)
- `<leader>ss`: Send the visual selection or current line to the terminal.
  (Normal and Visual mode in non-terminal buffers)
- `?`: Show a help window with keymaps. (Normal mode in terminal buffer)

------------------------------------------------------------------------------
Mouse Actions (on Winbar)                     *tabterm-mouse-actions*

- Left-click: Switch to the clicked terminal tab.
- Middle-click: Close the clicked terminal tab.
- Right-click: Rename the clicked terminal tab.

==============================================================================
CONFIGURATION                                 *tabterm-configuration*

`tabterm.nvim` is configured through the `setup()` function. You can pass a
table with your settings.

*tabterm-options*
`setup(opts)`

`opts` is a table that can contain the following keys:

- `shell` (string): The shell to use for new terminals.
  Default: `vim.o.shell` or `'bash'`

- `height` (number): The height of the terminal window as a ratio of the
  editor height (e.g., 0.4 for 40%).
  Default: `0.4`

- `keymap` (table): A table to override the default keymaps.
  See |tabterm-keymaps| for default values.
  Example: `{ toggle = "<F1>", add = "<F2>" }`

------------------------------------------------------------------------------
Configuration Example                         *tabterm-configuration-example*

>lua
  require("tabterm").setup({
      shell = vim.o.shell or 'bash',
      height = 0.4,
      keymap = {
          toggle = "<C-t>",
          add = "<C-n>",
          shutdown = '<M-w>',
          move_next_tab = '<M-n>',
          move_prev_tab = '<M-h>',
          send_visual = '<leader>ss',
          send_line = '<leader>ss',
      },
  })
<
==============================================================================
API                                           *tabterm-api*

The following functions are available from the `tabterm` module:

`tabterm.setup(opts)`                           *tabterm.setup()*
  Sets up the plugin with the given options. See |tabterm-configuration|.

`tabterm.toggle()`                              *tabterm.toggle()*
  Toggles the terminal window open or closed.

`tabterm.open()`                                *tabterm.open()*
  Opens the terminal window.

`tabterm.close()`                               *tabterm.close()*
  Closes the terminal window.

`tabterm.new_terminal()`                        *tabterm.new_terminal()*
  Creates a new terminal.

`tabterm.send_line_text()`                      *tabterm.send_line_text()*
  Sends the current line to the terminal.

`tabterm.send_visual_text()`                    *tabterm.send_visual_text()*
  Sends the current visual selection to the terminal.

`tabterm.move_next_tab()`                       *tabterm.move_next_tab()*
  Switches to the next terminal tab.

`tabterm.move_prev_tab()`                       *tabterm.move_prev_tab()*
  Switches to the previous terminal tab.

`tabterm.shutdown_term(term)`                   *tabterm.shutdown_term()*
  Shuts down the specified terminal. `term` is a `toggleterm` Terminal object.

==============================================================================
LICENSE                                       *tabterm-license*

The plugin is licensed under the MIT license.

vim:tw=78:ts=8:sw=2:sts=2:et:ft=help:norl:
